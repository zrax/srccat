/* This file is part of srccat.
 * Copyright (c) 2017 Michael Hansen
 *
 * srccat is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * srccat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with srccat.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "esc_color.h"

#include <array>
#include <cmath>

const EscPalette *EscPalette::Palette8()
{
    static EscPalette pal;
    if (!pal.isCompiled()) {
        QVector<ColorCode> colors {
            {QColor{  0,   0,   0}, "30", "40"},
            {QColor{128,   0,   0}, "31", "41"},
            {QColor{  0, 128,   0}, "32", "42"},
            {QColor{128, 128,   0}, "33", "43"},
            {QColor{  0,   0, 128}, "34", "44"},
            {QColor{128,   0, 128}, "35", "45"},
            {QColor{  0, 128, 128}, "36", "46"},
            {QColor{192, 192, 192}, "37", "47"},
            {QColor{128, 128, 128}, "1;30", ""},
            {QColor{255,   0,   0}, "1;31", ""},
            {QColor{  0, 255,   0}, "1;32", ""},
            {QColor{255, 255,   0}, "1;33", ""},
            {QColor{  0,   0, 255}, "1;34", ""},
            {QColor{255,   0, 255}, "1;35", ""},
            {QColor{  0, 255, 255}, "1;36", ""},
            {QColor{255, 255, 255}, "1;37", ""},
        };
        pal.compile(colors);
    }

    return &pal;
}

const EscPalette *EscPalette::Palette16()
{
    // Based on xterm, but should be close enough for most 16-color graphical
    // terminals that support xterm escape sequences

    static EscPalette pal;
    if (!pal.isCompiled()) {
        QVector<ColorCode> colors {
            {QColor{  0,   0,   0}, "30", "40"},
            {QColor{205,   0,   0}, "31", "41"},
            {QColor{  0, 205,   0}, "32", "42"},
            {QColor{205, 205,   0}, "33", "43"},
            {QColor{  0,   0, 238}, "34", "44"},
            {QColor{205,   0, 205}, "35", "45"},
            {QColor{  0, 205, 205}, "36", "46"},
            {QColor{229, 229, 229}, "37", "47"},
            {QColor{127, 127, 127}, "90", "100"},
            {QColor{255,   0,   0}, "91", "101"},
            {QColor{  0, 255,   0}, "92", "102"},
            {QColor{255, 255,   0}, "93", "103"},
            {QColor{ 92,  92, 255}, "94", "104"},
            {QColor{255,   0, 255}, "95", "105"},
            {QColor{  0, 255, 255}, "96", "106"},
            {QColor{255, 255, 255}, "97", "107"},
        };
        pal.compile(colors);
    }

    return &pal;
}

const EscPalette *EscPalette::Palette88()
{
    // Based on rxvt's color palette

    static EscPalette pal;
    if (!pal.isCompiled()) {
        QVector<ColorCode> colors {
            //DUP {QColor{  0,   0,   0}, "38;5;0", "48;5;0"},
            //DUP {QColor{205,   0,   0}, "38;5;1", "48;5;1"},
            //DUP {QColor{  0, 205,   0}, "38;5;2", "48;5;2"},
            //DUP {QColor{205, 205,   0}, "38;5;3", "48;5;3"},
            //DUP {QColor{  0,   0, 205}, "38;5;4", "48;5;4"},
            //DUP {QColor{205,   0, 205}, "38;5;5", "48;5;5"},
            //DUP {QColor{  0, 205, 205}, "38;5;6", "48;5;6"},
            {QColor{229, 229, 229}, "38;5;7", "48;5;7"},
            {QColor{ 77,  77,  77}, "38;5;8", "48;5;8"},
            //DUP {QColor{255,   0,   0}, "38;5;9", "48;5;9"},
            //DUP {QColor{  0, 255,   0}, "38;5;10", "48;5;10"},
            //DUP {QColor{255, 255,   0}, "38;5;11", "48;5;11"},
            //DUP {QColor{  0,   0, 255}, "38;5;12", "48;5;12"},
            //DUP {QColor{255,   0, 255}, "38;5;13", "48;5;13"},
            //DUP {QColor{  0, 255, 255}, "38;5;14", "48;5;14"},
            //DUP {QColor{255, 255, 255}, "38;5;15", "48;5;15"},
            {QColor{  0,   0,   0}, "38;5;16", "48;5;16"},
            {QColor{  0,   0, 139}, "38;5;17", "48;5;17"},
            {QColor{  0,   0, 205}, "38;5;18", "48;5;18"},
            {QColor{  0,   0, 255}, "38;5;19", "48;5;19"},
            {QColor{  0, 139,   0}, "38;5;20", "48;5;20"},
            {QColor{  0, 139, 139}, "38;5;21", "48;5;21"},
            {QColor{  0, 139, 205}, "38;5;22", "48;5;22"},
            {QColor{  0, 139, 255}, "38;5;23", "48;5;23"},
            {QColor{  0, 205,   0}, "38;5;24", "48;5;24"},
            {QColor{  0, 205, 139}, "38;5;25", "48;5;25"},
            {QColor{  0, 205, 205}, "38;5;26", "48;5;26"},
            {QColor{  0, 205, 255}, "38;5;27", "48;5;27"},
            {QColor{  0, 255,   0}, "38;5;28", "48;5;28"},
            {QColor{  0, 255, 139}, "38;5;29", "48;5;29"},
            {QColor{  0, 255, 205}, "38;5;30", "48;5;30"},
            {QColor{  0, 255, 255}, "38;5;31", "48;5;31"},
            {QColor{139,   0,   0}, "38;5;32", "48;5;32"},
            {QColor{139,   0, 139}, "38;5;33", "48;5;33"},
            {QColor{139,   0, 205}, "38;5;34", "48;5;34"},
            {QColor{139,   0, 255}, "38;5;35", "48;5;35"},
            {QColor{139, 139,   0}, "38;5;36", "48;5;36"},
            {QColor{139, 139, 139}, "38;5;37", "48;5;37"},
            {QColor{139, 139, 205}, "38;5;38", "48;5;38"},
            {QColor{139, 139, 255}, "38;5;39", "48;5;39"},
            {QColor{139, 205,   0}, "38;5;40", "48;5;40"},
            {QColor{139, 205, 139}, "38;5;41", "48;5;41"},
            {QColor{139, 205, 205}, "38;5;42", "48;5;42"},
            {QColor{139, 205, 255}, "38;5;43", "48;5;43"},
            {QColor{139, 255,   0}, "38;5;44", "48;5;44"},
            {QColor{139, 255, 139}, "38;5;45", "48;5;45"},
            {QColor{139, 255, 205}, "38;5;46", "48;5;46"},
            {QColor{139, 255, 255}, "38;5;47", "48;5;47"},
            {QColor{205,   0,   0}, "38;5;48", "48;5;48"},
            {QColor{205,   0, 139}, "38;5;49", "48;5;49"},
            {QColor{205,   0, 205}, "38;5;50", "48;5;50"},
            {QColor{205,   0, 255}, "38;5;51", "48;5;51"},
            {QColor{205, 139,   0}, "38;5;52", "48;5;52"},
            {QColor{205, 139, 139}, "38;5;53", "48;5;53"},
            {QColor{205, 139, 205}, "38;5;54", "48;5;54"},
            {QColor{205, 139, 255}, "38;5;55", "48;5;55"},
            {QColor{205, 205,   0}, "38;5;56", "48;5;56"},
            {QColor{205, 205, 139}, "38;5;57", "48;5;57"},
            {QColor{205, 205, 205}, "38;5;58", "48;5;58"},
            {QColor{205, 205, 255}, "38;5;59", "48;5;59"},
            {QColor{205, 255,   0}, "38;5;60", "48;5;60"},
            {QColor{205, 255, 139}, "38;5;61", "48;5;61"},
            {QColor{205, 255, 205}, "38;5;62", "48;5;62"},
            {QColor{205, 255, 255}, "38;5;63", "48;5;63"},
            {QColor{255,   0,   0}, "38;5;64", "48;5;64"},
            {QColor{255,   0, 139}, "38;5;65", "48;5;65"},
            {QColor{255,   0, 205}, "38;5;66", "48;5;66"},
            {QColor{255,   0, 255}, "38;5;67", "48;5;67"},
            {QColor{255, 139,   0}, "38;5;68", "48;5;68"},
            {QColor{255, 139, 139}, "38;5;69", "48;5;69"},
            {QColor{255, 139, 205}, "38;5;70", "48;5;70"},
            {QColor{255, 139, 255}, "38;5;71", "48;5;71"},
            {QColor{255, 205,   0}, "38;5;72", "48;5;72"},
            {QColor{255, 205, 139}, "38;5;73", "48;5;73"},
            {QColor{255, 205, 205}, "38;5;74", "48;5;74"},
            {QColor{255, 205, 255}, "38;5;75", "48;5;75"},
            {QColor{255, 255,   0}, "38;5;76", "48;5;76"},
            {QColor{255, 255, 139}, "38;5;77", "48;5;77"},
            {QColor{255, 255, 205}, "38;5;78", "48;5;78"},
            {QColor{255, 255, 255}, "38;5;79", "48;5;79"},
            {QColor{ 46,  46,  46}, "38;5;80", "48;5;80"},
            {QColor{ 92,  92,  92}, "38;5;81", "48;5;81"},
            {QColor{115, 115, 115}, "38;5;82", "48;5;82"},
            {QColor{139, 139, 139}, "38;5;83", "48;5;83"},
            {QColor{162, 162, 162}, "38;5;84", "48;5;84"},
            {QColor{185, 185, 185}, "38;5;85", "48;5;85"},
            {QColor{208, 208, 208}, "38;5;86", "48;5;86"},
            {QColor{231, 231, 231}, "38;5;87", "48;5;87"},
        };
        pal.compile(colors);
    }

    return &pal;
}

const EscPalette *EscPalette::Palette256()
{
    static EscPalette pal;
    if (!pal.isCompiled()) {
        QVector<ColorCode> colors {
            //DUP {QColor{  0,   0,   0}, "38;5;0", "48;5;0"},
            {QColor{128,   0,   0}, "38;5;1", "48;5;1"},
            {QColor{  0, 128,   0}, "38;5;2", "48;5;2"},
            {QColor{128, 128,   0}, "38;5;3", "48;5;3"},
            {QColor{  0,   0, 128}, "38;5;4", "48;5;4"},
            {QColor{128,   0, 128}, "38;5;5", "48;5;5"},
            {QColor{  0, 128, 128}, "38;5;6", "48;5;6"},
            {QColor{192, 192, 192}, "38;5;7", "48;5;7"},
            //DUP {QColor{128, 128, 128}, "38;5;8", "48;5;8"},
            //DUP {QColor{255,   0,   0}, "38;5;9", "48;5;9"},
            //DUP {QColor{  0, 255,   0}, "38;5;10", "48;5;10"},
            //DUP {QColor{255, 255,   0}, "38;5;11", "48;5;11"},
            //DUP {QColor{  0,   0, 255}, "38;5;12", "48;5;12"},
            //DUP {QColor{255,   0, 255}, "38;5;13", "48;5;13"},
            //DUP {QColor{  0, 255, 255}, "38;5;14", "48;5;14"},
            //DUP {QColor{255, 255, 255}, "38;5;15", "48;5;15"},
            {QColor{  0,   0,   0}, "38;5;16", "48;5;16"},
            {QColor{  0,   0,  95}, "38;5;17", "48;5;17"},
            {QColor{  0,   0, 135}, "38;5;18", "48;5;18"},
            {QColor{  0,   0, 175}, "38;5;19", "48;5;19"},
            {QColor{  0,   0, 215}, "38;5;20", "48;5;20"},
            {QColor{  0,   0, 255}, "38;5;21", "48;5;21"},
            {QColor{  0,  95,   0}, "38;5;22", "48;5;22"},
            {QColor{  0,  95,  95}, "38;5;23", "48;5;23"},
            {QColor{  0,  95, 135}, "38;5;24", "48;5;24"},
            {QColor{  0,  95, 175}, "38;5;25", "48;5;25"},
            {QColor{  0,  95, 215}, "38;5;26", "48;5;26"},
            {QColor{  0,  95, 255}, "38;5;27", "48;5;27"},
            {QColor{  0, 135,   0}, "38;5;28", "48;5;28"},
            {QColor{  0, 135,  95}, "38;5;29", "48;5;29"},
            {QColor{  0, 135, 135}, "38;5;30", "48;5;30"},
            {QColor{  0, 135, 175}, "38;5;31", "48;5;31"},
            {QColor{  0, 135, 215}, "38;5;32", "48;5;32"},
            {QColor{  0, 135, 255}, "38;5;33", "48;5;33"},
            {QColor{  0, 175,   0}, "38;5;34", "48;5;34"},
            {QColor{  0, 175,  95}, "38;5;35", "48;5;35"},
            {QColor{  0, 175, 135}, "38;5;36", "48;5;36"},
            {QColor{  0, 175, 175}, "38;5;37", "48;5;37"},
            {QColor{  0, 175, 215}, "38;5;38", "48;5;38"},
            {QColor{  0, 175, 255}, "38;5;39", "48;5;39"},
            {QColor{  0, 215,   0}, "38;5;40", "48;5;40"},
            {QColor{  0, 215,  95}, "38;5;41", "48;5;41"},
            {QColor{  0, 215, 135}, "38;5;42", "48;5;42"},
            {QColor{  0, 215, 175}, "38;5;43", "48;5;43"},
            {QColor{  0, 215, 215}, "38;5;44", "48;5;44"},
            {QColor{  0, 215, 255}, "38;5;45", "48;5;45"},
            {QColor{  0, 255,   0}, "38;5;46", "48;5;46"},
            {QColor{  0, 255,  95}, "38;5;47", "48;5;47"},
            {QColor{  0, 255, 135}, "38;5;48", "48;5;48"},
            {QColor{  0, 255, 175}, "38;5;49", "48;5;49"},
            {QColor{  0, 255, 215}, "38;5;50", "48;5;50"},
            {QColor{  0, 255, 255}, "38;5;51", "48;5;51"},
            {QColor{ 95,   0,   0}, "38;5;52", "48;5;52"},
            {QColor{ 95,   0,  95}, "38;5;53", "48;5;53"},
            {QColor{ 95,   0, 135}, "38;5;54", "48;5;54"},
            {QColor{ 95,   0, 175}, "38;5;55", "48;5;55"},
            {QColor{ 95,   0, 215}, "38;5;56", "48;5;56"},
            {QColor{ 95,   0, 255}, "38;5;57", "48;5;57"},
            {QColor{ 95,  95,   0}, "38;5;58", "48;5;58"},
            {QColor{ 95,  95,  95}, "38;5;59", "48;5;59"},
            {QColor{ 95,  95, 135}, "38;5;60", "48;5;60"},
            {QColor{ 95,  95, 175}, "38;5;61", "48;5;61"},
            {QColor{ 95,  95, 215}, "38;5;62", "48;5;62"},
            {QColor{ 95,  95, 255}, "38;5;63", "48;5;63"},
            {QColor{ 95, 135,   0}, "38;5;64", "48;5;64"},
            {QColor{ 95, 135,  95}, "38;5;65", "48;5;65"},
            {QColor{ 95, 135, 135}, "38;5;66", "48;5;66"},
            {QColor{ 95, 135, 175}, "38;5;67", "48;5;67"},
            {QColor{ 95, 135, 215}, "38;5;68", "48;5;68"},
            {QColor{ 95, 135, 255}, "38;5;69", "48;5;69"},
            {QColor{ 95, 175,   0}, "38;5;70", "48;5;70"},
            {QColor{ 95, 175,  95}, "38;5;71", "48;5;71"},
            {QColor{ 95, 175, 135}, "38;5;72", "48;5;72"},
            {QColor{ 95, 175, 175}, "38;5;73", "48;5;73"},
            {QColor{ 95, 175, 215}, "38;5;74", "48;5;74"},
            {QColor{ 95, 175, 255}, "38;5;75", "48;5;75"},
            {QColor{ 95, 215,   0}, "38;5;76", "48;5;76"},
            {QColor{ 95, 215,  95}, "38;5;77", "48;5;77"},
            {QColor{ 95, 215, 135}, "38;5;78", "48;5;78"},
            {QColor{ 95, 215, 175}, "38;5;79", "48;5;79"},
            {QColor{ 95, 215, 215}, "38;5;80", "48;5;80"},
            {QColor{ 95, 215, 255}, "38;5;81", "48;5;81"},
            {QColor{ 95, 255,   0}, "38;5;82", "48;5;82"},
            {QColor{ 95, 255,  95}, "38;5;83", "48;5;83"},
            {QColor{ 95, 255, 135}, "38;5;84", "48;5;84"},
            {QColor{ 95, 255, 175}, "38;5;85", "48;5;85"},
            {QColor{ 95, 255, 215}, "38;5;86", "48;5;86"},
            {QColor{ 95, 255, 255}, "38;5;87", "48;5;87"},
            {QColor{135,   0,   0}, "38;5;88", "48;5;88"},
            {QColor{135,   0,  95}, "38;5;89", "48;5;89"},
            {QColor{135,   0, 135}, "38;5;90", "48;5;90"},
            {QColor{135,   0, 175}, "38;5;91", "48;5;91"},
            {QColor{135,   0, 215}, "38;5;92", "48;5;92"},
            {QColor{135,   0, 255}, "38;5;93", "48;5;93"},
            {QColor{135,  95,   0}, "38;5;94", "48;5;94"},
            {QColor{135,  95,  95}, "38;5;95", "48;5;95"},
            {QColor{135,  95, 135}, "38;5;96", "48;5;96"},
            {QColor{135,  95, 175}, "38;5;97", "48;5;97"},
            {QColor{135,  95, 215}, "38;5;98", "48;5;98"},
            {QColor{135,  95, 255}, "38;5;99", "48;5;99"},
            {QColor{135, 135,   0}, "38;5;100", "48;5;100"},
            {QColor{135, 135,  95}, "38;5;101", "48;5;101"},
            {QColor{135, 135, 135}, "38;5;102", "48;5;102"},
            {QColor{135, 135, 175}, "38;5;103", "48;5;103"},
            {QColor{135, 135, 215}, "38;5;104", "48;5;104"},
            {QColor{135, 135, 255}, "38;5;105", "48;5;105"},
            {QColor{135, 175,   0}, "38;5;106", "48;5;106"},
            {QColor{135, 175,  95}, "38;5;107", "48;5;107"},
            {QColor{135, 175, 135}, "38;5;108", "48;5;108"},
            {QColor{135, 175, 175}, "38;5;109", "48;5;109"},
            {QColor{135, 175, 215}, "38;5;110", "48;5;110"},
            {QColor{135, 175, 255}, "38;5;111", "48;5;111"},
            {QColor{135, 215,   0}, "38;5;112", "48;5;112"},
            {QColor{135, 215,  95}, "38;5;113", "48;5;113"},
            {QColor{135, 215, 135}, "38;5;114", "48;5;114"},
            {QColor{135, 215, 175}, "38;5;115", "48;5;115"},
            {QColor{135, 215, 215}, "38;5;116", "48;5;116"},
            {QColor{135, 215, 255}, "38;5;117", "48;5;117"},
            {QColor{135, 255,   0}, "38;5;118", "48;5;118"},
            {QColor{135, 255,  95}, "38;5;119", "48;5;119"},
            {QColor{135, 255, 135}, "38;5;120", "48;5;120"},
            {QColor{135, 255, 175}, "38;5;121", "48;5;121"},
            {QColor{135, 255, 215}, "38;5;122", "48;5;122"},
            {QColor{135, 255, 255}, "38;5;123", "48;5;123"},
            {QColor{175,   0,   0}, "38;5;124", "48;5;124"},
            {QColor{175,   0,  95}, "38;5;125", "48;5;125"},
            {QColor{175,   0, 135}, "38;5;126", "48;5;126"},
            {QColor{175,   0, 175}, "38;5;127", "48;5;127"},
            {QColor{175,   0, 215}, "38;5;128", "48;5;128"},
            {QColor{175,   0, 255}, "38;5;129", "48;5;129"},
            {QColor{175,  95,   0}, "38;5;130", "48;5;130"},
            {QColor{175,  95,  95}, "38;5;131", "48;5;131"},
            {QColor{175,  95, 135}, "38;5;132", "48;5;132"},
            {QColor{175,  95, 175}, "38;5;133", "48;5;133"},
            {QColor{175,  95, 215}, "38;5;134", "48;5;134"},
            {QColor{175,  95, 255}, "38;5;135", "48;5;135"},
            {QColor{175, 135,   0}, "38;5;136", "48;5;136"},
            {QColor{175, 135,  95}, "38;5;137", "48;5;137"},
            {QColor{175, 135, 135}, "38;5;138", "48;5;138"},
            {QColor{175, 135, 175}, "38;5;139", "48;5;139"},
            {QColor{175, 135, 215}, "38;5;140", "48;5;140"},
            {QColor{175, 135, 255}, "38;5;141", "48;5;141"},
            {QColor{175, 175,   0}, "38;5;142", "48;5;142"},
            {QColor{175, 175,  95}, "38;5;143", "48;5;143"},
            {QColor{175, 175, 135}, "38;5;144", "48;5;144"},
            {QColor{175, 175, 175}, "38;5;145", "48;5;145"},
            {QColor{175, 175, 215}, "38;5;146", "48;5;146"},
            {QColor{175, 175, 255}, "38;5;147", "48;5;147"},
            {QColor{175, 215,   0}, "38;5;148", "48;5;148"},
            {QColor{175, 215,  95}, "38;5;149", "48;5;149"},
            {QColor{175, 215, 135}, "38;5;150", "48;5;150"},
            {QColor{175, 215, 175}, "38;5;151", "48;5;151"},
            {QColor{175, 215, 215}, "38;5;152", "48;5;152"},
            {QColor{175, 215, 255}, "38;5;153", "48;5;153"},
            {QColor{175, 255,   0}, "38;5;154", "48;5;154"},
            {QColor{175, 255,  95}, "38;5;155", "48;5;155"},
            {QColor{175, 255, 135}, "38;5;156", "48;5;156"},
            {QColor{175, 255, 175}, "38;5;157", "48;5;157"},
            {QColor{175, 255, 215}, "38;5;158", "48;5;158"},
            {QColor{175, 255, 255}, "38;5;159", "48;5;159"},
            {QColor{215,   0,   0}, "38;5;160", "48;5;160"},
            {QColor{215,   0,  95}, "38;5;161", "48;5;161"},
            {QColor{215,   0, 135}, "38;5;162", "48;5;162"},
            {QColor{215,   0, 175}, "38;5;163", "48;5;163"},
            {QColor{215,   0, 215}, "38;5;164", "48;5;164"},
            {QColor{215,   0, 255}, "38;5;165", "48;5;165"},
            {QColor{215,  95,   0}, "38;5;166", "48;5;166"},
            {QColor{215,  95,  95}, "38;5;167", "48;5;167"},
            {QColor{215,  95, 135}, "38;5;168", "48;5;168"},
            {QColor{215,  95, 175}, "38;5;169", "48;5;169"},
            {QColor{215,  95, 215}, "38;5;170", "48;5;170"},
            {QColor{215,  95, 255}, "38;5;171", "48;5;171"},
            {QColor{215, 135,   0}, "38;5;172", "48;5;172"},
            {QColor{215, 135,  95}, "38;5;173", "48;5;173"},
            {QColor{215, 135, 135}, "38;5;174", "48;5;174"},
            {QColor{215, 135, 175}, "38;5;175", "48;5;175"},
            {QColor{215, 135, 215}, "38;5;176", "48;5;176"},
            {QColor{215, 135, 255}, "38;5;177", "48;5;177"},
            {QColor{215, 175,   0}, "38;5;178", "48;5;178"},
            {QColor{215, 175,  95}, "38;5;179", "48;5;179"},
            {QColor{215, 175, 135}, "38;5;180", "48;5;180"},
            {QColor{215, 175, 175}, "38;5;181", "48;5;181"},
            {QColor{215, 175, 215}, "38;5;182", "48;5;182"},
            {QColor{215, 175, 255}, "38;5;183", "48;5;183"},
            {QColor{215, 215,   0}, "38;5;184", "48;5;184"},
            {QColor{215, 215,  95}, "38;5;185", "48;5;185"},
            {QColor{215, 215, 135}, "38;5;186", "48;5;186"},
            {QColor{215, 215, 175}, "38;5;187", "48;5;187"},
            {QColor{215, 215, 215}, "38;5;188", "48;5;188"},
            {QColor{215, 215, 255}, "38;5;189", "48;5;189"},
            {QColor{215, 255,   0}, "38;5;190", "48;5;190"},
            {QColor{215, 255,  95}, "38;5;191", "48;5;191"},
            {QColor{215, 255, 135}, "38;5;192", "48;5;192"},
            {QColor{215, 255, 175}, "38;5;193", "48;5;193"},
            {QColor{215, 255, 215}, "38;5;194", "48;5;194"},
            {QColor{215, 255, 255}, "38;5;195", "48;5;195"},
            {QColor{255,   0,   0}, "38;5;196", "48;5;196"},
            {QColor{255,   0,  95}, "38;5;197", "48;5;197"},
            {QColor{255,   0, 135}, "38;5;198", "48;5;198"},
            {QColor{255,   0, 175}, "38;5;199", "48;5;199"},
            {QColor{255,   0, 215}, "38;5;200", "48;5;200"},
            {QColor{255,   0, 255}, "38;5;201", "48;5;201"},
            {QColor{255,  95,   0}, "38;5;202", "48;5;202"},
            {QColor{255,  95,  95}, "38;5;203", "48;5;203"},
            {QColor{255,  95, 135}, "38;5;204", "48;5;204"},
            {QColor{255,  95, 175}, "38;5;205", "48;5;205"},
            {QColor{255,  95, 215}, "38;5;206", "48;5;206"},
            {QColor{255,  95, 255}, "38;5;207", "48;5;207"},
            {QColor{255, 135,   0}, "38;5;208", "48;5;208"},
            {QColor{255, 135,  95}, "38;5;209", "48;5;209"},
            {QColor{255, 135, 135}, "38;5;210", "48;5;210"},
            {QColor{255, 135, 175}, "38;5;211", "48;5;211"},
            {QColor{255, 135, 215}, "38;5;212", "48;5;212"},
            {QColor{255, 135, 255}, "38;5;213", "48;5;213"},
            {QColor{255, 175,   0}, "38;5;214", "48;5;214"},
            {QColor{255, 175,  95}, "38;5;215", "48;5;215"},
            {QColor{255, 175, 135}, "38;5;216", "48;5;216"},
            {QColor{255, 175, 175}, "38;5;217", "48;5;217"},
            {QColor{255, 175, 215}, "38;5;218", "48;5;218"},
            {QColor{255, 175, 255}, "38;5;219", "48;5;219"},
            {QColor{255, 215,   0}, "38;5;220", "48;5;220"},
            {QColor{255, 215,  95}, "38;5;221", "48;5;221"},
            {QColor{255, 215, 135}, "38;5;222", "48;5;222"},
            {QColor{255, 215, 175}, "38;5;223", "48;5;223"},
            {QColor{255, 215, 215}, "38;5;224", "48;5;224"},
            {QColor{255, 215, 255}, "38;5;225", "48;5;225"},
            {QColor{255, 255,   0}, "38;5;226", "48;5;226"},
            {QColor{255, 255,  95}, "38;5;227", "48;5;227"},
            {QColor{255, 255, 135}, "38;5;228", "48;5;228"},
            {QColor{255, 255, 175}, "38;5;229", "48;5;229"},
            {QColor{255, 255, 215}, "38;5;230", "48;5;230"},
            {QColor{255, 255, 255}, "38;5;231", "48;5;231"},
            {QColor{  8,   8,   8}, "38;5;232", "48;5;232"},
            {QColor{ 18,  18,  18}, "38;5;233", "48;5;233"},
            {QColor{ 28,  28,  28}, "38;5;234", "48;5;234"},
            {QColor{ 38,  38,  38}, "38;5;235", "48;5;235"},
            {QColor{ 48,  48,  48}, "38;5;236", "48;5;236"},
            {QColor{ 58,  58,  58}, "38;5;237", "48;5;237"},
            {QColor{ 68,  68,  68}, "38;5;238", "48;5;238"},
            {QColor{ 78,  78,  78}, "38;5;239", "48;5;239"},
            {QColor{ 88,  88,  88}, "38;5;240", "48;5;240"},
            {QColor{ 98,  98,  98}, "38;5;241", "48;5;241"},
            {QColor{108, 108, 108}, "38;5;242", "48;5;242"},
            {QColor{118, 118, 118}, "38;5;243", "48;5;243"},
            {QColor{128, 128, 128}, "38;5;244", "48;5;244"},
            {QColor{138, 138, 138}, "38;5;245", "48;5;245"},
            {QColor{148, 148, 148}, "38;5;246", "48;5;246"},
            {QColor{158, 158, 158}, "38;5;247", "48;5;247"},
            {QColor{168, 168, 168}, "38;5;248", "48;5;248"},
            {QColor{178, 178, 178}, "38;5;249", "48;5;249"},
            {QColor{188, 188, 188}, "38;5;250", "48;5;250"},
            {QColor{198, 198, 198}, "38;5;251", "48;5;251"},
            {QColor{208, 208, 208}, "38;5;252", "48;5;252"},
            {QColor{218, 218, 218}, "38;5;253", "48;5;253"},
            {QColor{228, 228, 228}, "38;5;254", "48;5;254"},
            {QColor{238, 238, 238}, "38;5;255", "48;5;255"},
        };
        pal.compile(colors);
    }

    return &pal;
}

const EscPalette *EscPalette::TrueColor()
{
    static EscPalette pal;
    if (!pal.isCompiled()) {
        pal.m_state = _TrueColor;
    }

    return &pal;
}

QByteArray EscPalette::foreground(const QColor &color) const
{
    if (m_state == _TrueColor) {
        char buffer[24];
        snprintf(buffer, sizeof(buffer), "38;2;%d;%d;%d",
                 color.red(), color.green(), color.blue());
        return buffer;
    }

    ColorCode closestColor = findClosest(color);
    return closestColor.m_foreFormat;
}

QByteArray EscPalette::background(const QColor &color) const
{
    if (m_state == _TrueColor) {
        char buffer[24];
        snprintf(buffer, sizeof(buffer), "48;2;%d;%d;%d",
                 color.red(), color.green(), color.blue());
        return buffer;
    }

    ColorCode closestColor = findClosest(color);
    return closestColor.m_backFormat;
}

/* HSL space seems to give "good enough" results with minimal performance
 * impact.  However, I left the others in here in case someone wants to
 * experiment with lookups in other color spaces for whatever reason.
 */
#define lookup_space hsl_space

inline void qcolor_to_hsl(const QColor &color, float &h, float &s, float &l)
{
#if QT_VERSION_MAJOR >= 6
    color.getHslF(&h, &s, &l);
#else
    qreal h_, s_, l_;
    color.getHslF(&h_, &s_, &l_);
    h = static_cast<float>(h_);
    s = static_cast<float>(s_);
    l = static_cast<float>(l_);
#endif
}

inline void qcolor_to_rgb(const QColor &color, float &r, float &g, float &b)
{
#if QT_VERSION_MAJOR >= 6
    color.getRgbF(&r, &g, &b);
#else
    qreal r_, g_, b_;
    color.getRgbF(&r_, &g_, &b_);
    r = static_cast<float>(r_);
    g = static_cast<float>(g_);
    b = static_cast<float>(b_);
#endif
}

static std::array<float, 3> hsl_space(const QColor &color)
{
    float h, s, l;
    qcolor_to_hsl(color, h, s, l);
    if (h < -0.99) {
        // Qt returns -1.0 for anything along the grayscale spectrum, and
        // [0,1) for non-gray values... In order to make grayish colors less
        // likely to show up as random reds and browns, we move it closer to
        // the rest of the color space.
        h = 0;
    }

    const auto x = s * std::cos(2.0f * h * float(M_PI));
    const auto y = s * std::sin(2.0f * h * float(M_PI));
    const auto z = (2.0f * l) - 1.0f;
    return {x, y, z};
}

static std::array<float, 3> rgb_space(const QColor &color)
{
    float r, g, b;
    qcolor_to_rgb(color, r, g, b);
    return {r, g, b};
}

static std::array<float, 3> xyz_space(const QColor &color)
{
    auto rgb = rgb_space(color);
    for (size_t c = 0; c < rgb.size(); ++c) {
        if (rgb[c] > 0.04045)
            rgb[c] = std::pow((rgb[c] + 0.055) / 1.055, 2.4);
        else
            rgb[c] /= 12.92;
        rgb[c] *= 100.0;
    }

    return { rgb[0] * 0.4124f + rgb[1] * 0.3576f + rgb[2] * 0.1805f,
             rgb[0] * 0.2126f + rgb[1] * 0.7152f + rgb[2] * 0.0722f,
             rgb[0] * 0.0193f + rgb[1] * 0.1192f + rgb[2] * 0.9505f };
};

static std::array<float, 3> lab_space(const QColor &color)
{
    auto xyz = xyz_space(color);
    xyz[0] /=  95.047f;
    xyz[1] /= 100.000f;
    xyz[2] /= 108.883f;

    for (size_t c = 0; c < xyz.size(); ++c) {
        if (xyz[c] > 0.008856f)
            xyz[c] = std::pow(xyz[c], 1.0f/3.0f);
        else
            xyz[c] = (7.787f * xyz[c]) + (16.0f/116.0f);
    }

    return { (116.0f * xyz[1]) - 16.0f,
             500.0f * (xyz[0] - xyz[1]),
             200.0f * (xyz[1] - xyz[2]) };
}

void EscPalette::compile(const QVector<ColorCode> &colors)
{
    m_colors = colors;
    m_state = _Compiled;
}

static float color_dist(const QColor &src, const QColor &dest)
{
    const auto src_pt = lookup_space(src);
    const auto dest_pt = lookup_space(dest);
    return std::hypot(std::hypot(src_pt[0] - dest_pt[0], src_pt[1] - dest_pt[1]),
                      src_pt[2] - dest_pt[2]);
}

EscPalette::ColorCode EscPalette::findClosest(const QColor &ref) const
{
    float closestDist = std::numeric_limits<float>::infinity();
    int closest = -1;
    for (int i = 0; i < m_colors.size(); ++i) {
        float dist = color_dist(ref, m_colors[i].m_color);
        if (dist < closestDist) {
            closest = i;
            closestDist = dist;
        }
    }
    return m_colors[closest];
}
